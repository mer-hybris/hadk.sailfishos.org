Packaging Droid HAL
===================

In this chapter, we will package the build results of :doc:`android`
as RPM packages and create a local RPM repository. From there, the RPM
packages can be added to a local target and used to build libhybris and the
QPA plugin. They can also be used to build the rootfs.

Packaging ``droid-hal-device``
------------------------------

This step requires:

* A populated ``$ANDROID_ROOT`` from :doc:`android`
* A Mer Platform SDK installation (chroot) for RPM building

Inside your ``$ANDROID_ROOT``, there is a copy of ``droid-hal-device``
in the ``rpm/`` directory (since it appears in the manifest).

The master git repo for the packaging is here:  https://github.com/mer-hybris/droid-hal-device

This ``rpm/`` dir contains the necessary ``.spec`` files to make a set of RPM
packages that form the core Droid hardware adaptation part and configuration
file setup of the hardware adaptation. It also builds a development package
that contains libraries and headers, which are used when building middleware
components (see :doc:`middleware`).

.. _build-rpms:

Building the droid-hal-device packages
``````````````````````````````````````

The next step has to be carried out in a Mer SDK chroot:

.. code-block:: console

    MER_SDK $

    cd $ANDROID_ROOT

    # type `rpm -q sdk-utils` to ensure you are using 0.65 or newer before proceeding!
    mb2 -t $VENDOR-$DEVICE-armv7hl -s rpm/droid-hal-$DEVICE.spec build

This should leave you with several RPM packages in ``$ANDROID_ROOT/RPMS/``.

If the second ``mb2`` fails by writing out inconsistencies in kernel ``CONFIG_``
flags, refer to the kernel verifier section: :ref:`kernel-config`.

.. _createrepo:

Create a local RPM repository
`````````````````````````````

Now we create a local repository that can be used to create images using
``mic`` or to install the development headers into our ``sb2`` target for
building middleware components:

.. code-block:: console

    MER_SDK $

    mkdir -p $ANDROID_ROOT/droid-local-repo/$DEVICE

    rm -f $ANDROID_ROOT/droid-local-repo/$DEVICE/droid-hal-*rpm
    mv RPMS/*$DEVICE* $ANDROID_ROOT/droid-local-repo/$DEVICE

    createrepo $ANDROID_ROOT/droid-local-repo/$DEVICE

.. _add-local-repo:

Add local RPM repo to Target
````````````````````````````

This will allow build dependencies to be met from locally built packages:

.. code-block:: console

    MER_SDK $

    sb2 -t $VENDOR-$DEVICE-armv7hl -R -m sdk-install \
      ssu ar local-$DEVICE-hal file://$ANDROID_ROOT/droid-local-repo/$DEVICE

(safe to ignore warnings about connman or DBus):

Check it's there:

.. code-block:: console

  MER_SDK $

  sb2 -t $VENDOR-$DEVICE-armv7hl -R -msdk-install ssu lr

The device specific configuration
`````````````````````````````````

Now build the droid-hal-configs package. This is split into its own package to
make supporting multiple devices easier.

.. warning::

    ``droid-hal-configs`` will re-generate your .ks file, so if it already
    exists, make backup and track any modifications yourself. You'll find your
    .ks here:
    ``$ANDROID_ROOT/installroot/usr/share/kickstarts/``
    with name ``Jolla-@RELEASE@-$DEVICE-@ARCH@.ks``

.. code-block:: console

  MER_SDK $

  hadk

  cd $ANDROID_ROOT
  mb2 -t $VENDOR-$DEVICE-armv7hl \
    -s hybris/droid-hal-configs/rpm/droid-hal-configs.spec \
    build


The ``/etc/hw-release`` file
----------------------------

Sailfish OS Hardware Adaptations use the file ``/etc/hw-release`` to store
variables related to the device adaptation. This file is read by different
middleware components to determine which adaptation repositories to enable
and which device-specific tweaks to apply.

File is autogenerated during the build of ``droid-hal-device`` (see ``droid-hal-device.inc``).
If you wish to provide more customisations, please read the remainder of this section.

The format of this file is a line-based ``KEY=value`` format. The ``KEY`` is a
non-empty string consisting of only upper case characters (``A-Z``) and the
underscore (``_``), it must not begin with an underscore (or in other words, it
must match the regular expression ``[A-Z][A-Z_]*``). Lines starting with ``#``
are considered comments and are ignored. Lines must not have any leading or
trailing whitespace (any such whitespace is stripped when the file is parsed),
and the ``=`` character must also not be surrounded by any whitespace. Values
can contain any valid UTF-8 character (but no newline character).

An example file could look like this:

.. code-block:: text

    # This is a comment
    MER_HA_DEVICE=mako
    MER_HA_VENDOR=lge

As far as Droid-based hardware adaptations are concerned, the following keys
are mandatory and specified:

* ``MER_HA_DEVICE``: Must be set to the device name, e.g. ``mako``
* ``MER_HA_VENDOR``: Must be set to the device vendor, e.g. ``lge``

All other keys are not yet specified, and should not be used; parsers should
ignore all lines that don't start with a known key.
